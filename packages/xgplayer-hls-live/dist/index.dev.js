!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["xgplayer-hls-live"]=e():t["xgplayer-hls-live"]=e()}(window,(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
  !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(t,e,s){"use strict";var i,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(t,e,s){return Function.prototype.apply.call(t,e,s)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function u(t,e,s,i){var r,n,a,o;if("function"!=typeof s)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof s);if(void 0===(n=t._events)?(n=t._events=Object.create(null),t._eventsCount=0):(void 0!==n.newListener&&(t.emit("newListener",e,s.listener?s.listener:s),n=t._events),a=n[e]),void 0===a)a=n[e]=s,++t._eventsCount;else if("function"==typeof a?a=n[e]=i?[s,a]:[a,s]:i?a.unshift(s):a.push(s),(r=d(t))>0&&a.length>r&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,o=l,console&&console.warn&&console.warn(o)}return t}function c(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,n(this.listener,this.target,t))}function h(t,e,s){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:s},r=c.bind(i);return r.listener=s,i.wrapFn=r,r}function f(t,e,s){var i=t._events;if(void 0===i)return[];var r=i[e];return void 0===r?[]:"function"==typeof r?s?[r.listener||r]:[r]:s?function(t){for(var e=new Array(t.length),s=0;s<e.length;++s)e[s]=t[s].listener||t[s];return e}(r):g(r,r.length)}function p(t){var e=this._events;if(void 0!==e){var s=e[t];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function g(t,e){for(var s=new Array(e),i=0;i<e;++i)s[i]=t[i];return s}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");l=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(t){for(var e=[],s=1;s<arguments.length;s++)e.push(arguments[s]);var i="error"===t,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var l=r[t];if(void 0===l)return!1;if("function"==typeof l)n(l,this,e);else{var d=l.length,u=g(l,d);for(s=0;s<d;++s)n(u[s],this,e)}return!0},o.prototype.addListener=function(t,e){return u(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return u(this,t,e,!0)},o.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,h(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,h(this,t,e)),this},o.prototype.removeListener=function(t,e){var s,i,r,n,a;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(i=this._events))return this;if(void 0===(s=i[t]))return this;if(s===e||s.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,s.listener||e));else if("function"!=typeof s){for(r=-1,n=s.length-1;n>=0;n--)if(s[n]===e||s[n].listener===e){a=s[n].listener,r=n;break}if(r<0)return this;0===r?s.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(s,r),1===s.length&&(i[t]=s[0]),void 0!==i.removeListener&&this.emit("removeListener",t,a||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,s,i;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[t]),this;if(0===arguments.length){var r,n=Object.keys(s);for(i=0;i<n.length;++i)"removeListener"!==(r=n[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=s[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},o.prototype.listeners=function(t){return f(this,t,!0)},o.prototype.rawListeners=function(t){return f(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},"../xgplayer-buffer/src/Track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/Track.js ***!
  \***************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}};e.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-buffer/src/index.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/index.js ***!
  \***************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RemuxBuffer=e.Tracks=e.VideoTrack=e.AudioTrack=e.XgBuffer=void 0;var i,r=s(/*! ./Track */"../xgplayer-buffer/src/Track.js"),n=(i=r)&&i.__esModule?i:{default:i};e.XgBuffer=class{constructor(t){this.length=t||0,this.historyLen=t||0,this.array=[],this.offset=0}push(t){this.array.push(t),this.length+=t.byteLength,this.historyLen+=t.byteLength}shift(t){if(this.array.length<1)return new Uint8Array(0);if(void 0===t)return this._shiftBuffer();if(this.offset+t===this.array[0].length){let e=this.array[0].slice(this.offset,this.offset+t);return this.offset=0,this.array.shift(),this.length-=t,e}if(this.offset+t<this.array[0].length){let e=this.array[0].slice(this.offset,this.offset+t);return this.offset+=t,this.length-=t,e}let e=new Uint8Array(t),s=0;for(;this.array.length>0&&t>0;){if(this.offset+t<this.array[0].length){let i=this.array[0].slice(this.offset,this.offset+t);e.set(i,s),this.offset+=t,this.length-=t,t=0;break}{let i=this.array[0].length-this.offset;e.set(this.array[0].slice(this.offset,this.array[0].length),s),this.array.shift(),this.offset=0,s+=i,this.length-=i,t-=i}}return e}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(t,e){let s=0,i=this.offset+t;for(;i<this.offset+e+t;)i<this.array[0].length?s=256*s+this.array[0][i]:this.array[1]&&(s=256*s+this.array[1][i-this.array[0].length]),i++;return s}};e.AudioTrack=class extends n.default{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};e.VideoTrack=class extends n.default{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};e.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}};e.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(){this.mimetype="",this.init=null,this.data=[]}}e.default=class{constructor(){this.sources={}}getSource(t){return this.sources[t]}createSource(t){return this.sources[t]=new i,this.sources[t]}clear(){this.sources={}}}},"../xgplayer-loader-fetch/src/index.js":
/*!*********************************************!*\
  !*** ../xgplayer-loader-fetch/src/index.js ***!
  \*********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! ../../xgplayer-utils/src/Context */"../xgplayer-utils/src/Context.js"),n=(i=r)&&i.__esModule?i:{default:i},a=s(/*! ../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js");const o=0,l=1,d=2;window.Context=n.default,e.default=class{constructor(t){this.configs=Object.assign({},t),this.url=null,this.status=0,this.error=null,this._reader=null,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER"}static get type(){return"loader"}load(t,e){let s=this;this.url=t;let i=this.getParams(e);return fetch(this.url,i).then((function(t){return s.status=t.status,s.loading=!0,s._onFetchResponse(t)}))}_onFetchResponse(t){let e=this,s=this._context.getInstance(this.buffer);if(!0===t.ok)switch(this.readtype){case d:t.json().then(t=>{s?(s.push(t),e.emit(a.LOADER_EVENTS.LOADER_COMPLETE,s)):e.emit(a.LOADER_EVENTS.LOADER_COMPLETE,t)});break;case l:t.text().then(t=>{s?(s.push(t),e.emit(a.LOADER_EVENTS.LOADER_COMPLETE,s)):e.emit(a.LOADER_EVENTS.LOADER_COMPLETE,t)});break;case o:default:return this._onReader(t.body.getReader())}}_onReader(t){let e=this._context.getInstance(this.buffer);if(e||this._reader.cancel(),this._reader=t,!1===this.loading)return;let s=this;this._reader&&this._reader.read().then((function(i){return i.done?(s.loading=!1,s.status=0,void s.emit(a.LOADER_EVENTS.LOADER_COMPLETE,e)):(e.push(i.value),s.emit(a.LOADER_EVENTS.LOADER_DATALOADED,e),s._onReader(t))})).catch((function(t){console.log(t)}))}getParams(t){let e=Object.assign({},t),s=new Headers,i={method:"GET",headers:s,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let t=this.configs.headers;for(let e in t)t.hasOwnProperty(e)&&s.append(e,t[e])}return!1===e.cors&&(i.mode="same-origin"),e.withCredentials&&(i.credentials="include"),i}cancel(){this._reader&&(this._reader.cancel(),this._reader=null)}}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils/dist/write/Buffer */"../xgplayer-utils/dist/write/Buffer.js"),n=(i=r)&&i.__esModule?i:{default:i};class a{static size(t){return n.default.writeUint32(t)}static initBox(t,e,...s){const i=new n.default;return i.write(a.size(t),a.type(e),...s),i.buffer}static extension(t,e){return new Uint8Array([t,e>>16&255,e>>8&255,255&e])}static ftyp(){return a.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:t,meta:e}){let s,i=8,r=a.mvhd(e.duration,e.timescale);s="video"===t?a.videoTrak(e):a.audioTrak(e);let n=a.mvex(e.duration,e.timescale||1e3,e.id);return[r,s,n].forEach(t=>{i+=t.byteLength}),a.initBox(i,"moov",r,s,n)}static mvhd(t,e=1e3){let s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return a.initBox(8+s.length,"mvhd",new Uint8Array(s))}static videoTrak(t){let e=8,s=a.tkhd({id:1,duration:t.duration,timescale:t.timescale||1e3,width:t.presentWidth,height:t.presentHeight,type:"video"}),i=a.mdia({type:"video",timescale:t.timescale||1e3,duration:t.duration,avcc:t.avcc,parRatio:t.parRatio,width:t.presentWidth,height:t.presentHeight});return[s,i].forEach(t=>{e+=t.byteLength}),a.initBox(e,"trak",s,i)}static audioTrak(t){let e=8,s=a.tkhd({id:2,duration:t.duration,timescale:t.timescale||1e3,width:0,height:0,type:"audio"}),i=a.mdia({type:"audio",timescale:t.timescale||1e3,duration:t.duration,channelCount:t.channelCount,samplerate:t.sampleRate,config:t.config});return[s,i].forEach(t=>{e+=t.byteLength}),a.initBox(e,"trak",s,i)}static tkhd(t){let e=t.id,s=t.duration,i=t.width,r=t.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,0,0,0,s>>>24&255,s>>>16&255,s>>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,i>>>8&255,255&i,0,0,r>>>8&255,255&r,0,0]);return a.initBox(8+n.byteLength,"tkhd",n)}static edts(t){let e=new n.default,s=t.duration,i=t.mediaTime;return e.write(a.size(36),a.type("edts")),e.write(a.size(28),a.type("elst")),e.write(new Uint8Array([0,0,0,1,s>>24&255,s>>16&255,s>>8&255,255&s,i>>24&255,i>>16&255,i>>8&255,255&i,0,0,0,1])),e.buffer}static mdia(t){let e=8,s=a.mdhd(t.timescale,t.duration),i=a.hdlr(t.type),r=a.minf(t);return[s,i,r].forEach(t=>{e+=t.byteLength}),a.initBox(e,"mdia",s,i,r)}static mdhd(t=1e3,e){let s=new Uint8Array([0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,85,196,0,0]);return a.initBox(12+s.byteLength,"mdhd",a.extension(0,0),s)}static hdlr(t){let e=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===t&&(e.splice(8,4,115,111,117,110),e.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),a.initBox(8+e.length,"hdlr",new Uint8Array(e))}static minf(t){let e=8,s="video"===t.type?a.vmhd():a.smhd(),i=a.dinf(),r=a.stbl(t);return[s,i,r].forEach(t=>{e+=t.byteLength}),a.initBox(e,"minf",s,i,r)}static vmhd(){return a.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return a.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let t=new n.default;return t.write(a.size(36),a.type("dinf"),a.size(28),a.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),t.buffer}static stbl(t){let e=8,s=a.stsd(t),i=a.stts(),r=a.stsc(),n=a.stsz(),o=a.stco();return[s,i,r,n,o].forEach(t=>{e+=t.byteLength}),a.initBox(e,"stbl",s,i,r,n,o)}static stsd(t){let e;return e="audio"===t.type?a.mp4a(t):a.avc1(t),a.initBox(16+e.byteLength,"stsd",a.extension(0,0),new Uint8Array([0,0,0,1]),e)}static mp4a(t){let e=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,t.samplerate>>8&255,255&t.samplerate,0,0]),s=a.esds(t.config);return a.initBox(8+e.byteLength+s.byteLength,"mp4a",e,s)}static esds(t=[43,146,8,0]){const e=t.length;let s=new n.default,i=new Uint8Array([0,0,0,0,3,23+e,0,1,0,4,15+e,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([e]).concat(t).concat([6,1,2]));return s.write(a.size(8+i.byteLength),a.type("esds"),i),s.buffer}static avc1(t){let e=new n.default,s=t.width,i=t.height,r=t.parRatio.height,o=t.parRatio.width,l=t.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,s>>8&255,255&s,i>>8&255,255&i,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),u=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),c=new Uint8Array([r>>24,r>>16&255,r>>8&255,255&r,o>>24,o>>16&255,o>>8&255,255&o]);return e.write(a.size(40+d.byteLength+l.byteLength+u.byteLength),a.type("avc1"),d,a.size(8+l.byteLength),a.type("avcC"),l,a.size(20),a.type("btrt"),u,a.size(16),a.type("pasp"),c),e.buffer}static stts(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stts",t)}static stsc(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stsc",t)}static stco(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stco",t)}static stsz(){let t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return a.initBox(20,"stsz",t)}static mvex(t,e=1e3,s){let i=new n.default,r=n.default.writeUint32(t);return i.write(a.size(56),a.type("mvex"),a.size(16),a.type("mehd"),a.extension(0,0),r,a.trex(s)),i.buffer}static trex(t){let e=new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return a.initBox(8+e.byteLength,"trex",e)}static moof(t){let e=8,s=a.mfhd(),i=a.traf(t);return[s,i].forEach(t=>{e+=t.byteLength}),a.initBox(e,"moof",s,i)}static mfhd(){let t=n.default.writeUint32(a.sequence);return a.sequence+=1,a.initBox(16,"mfhd",a.extension(0,0),t)}static traf(t){let e=8,s=a.tfhd(t.id),i=a.tfdt(t.time),r=a.sdtp(t),n=a.trun(t,r.byteLength);return[s,i,n,r].forEach(t=>{e+=t.byteLength}),a.initBox(e,"traf",s,i,n,r)}static tfhd(t){let e=n.default.writeUint32(t);return a.initBox(16,"tfhd",a.extension(0,0),e)}static tfdt(t){return a.initBox(16,"tfdt",a.extension(0,0),n.default.writeUint32(t))}static trun(t,e){let s=new n.default,i=n.default.writeUint32(t.samples.length),r=n.default.writeUint32(92+16*t.samples.length+e);return s.write(a.size(20+16*t.samples.length),a.type("trun"),new Uint8Array([0,0,15,1]),i,r),t.samples.forEach(t=>{const e=t.flags;s.write(new Uint8Array([t.duration>>>24&255,t.duration>>>16&255,t.duration>>>8&255,255&t.duration,t.size>>>24&255,t.size>>>16&255,t.size>>>8&255,255&t.size,e.isLeading<<2|e.dependsOn,e.isDependedOn<<6|e.hasRedundancy<<4|e.isNonSync,0,0,t.cts>>>24&255,t.cts>>>16&255,t.cts>>>8&255,255&t.cts]))}),s.buffer}static sdtp(t){let e=new n.default;return e.write(a.size(12+t.samples.length),a.type("sdtp"),a.extension(0,0)),t.samples.forEach(t=>{const s=t.flags,i=s.isLeading<<6|s.dependsOn<<4|s.isDependedOn<<2|s.hasRedundancy;e.write(new Uint8Array([i]))}),e.buffer}static mdat(t){let e=new n.default,s=8;t.samples.forEach(t=>{s+=t.size}),e.write(a.size(s),a.type("mdat"));let i=new Uint8Array(s),r=0;return i.set(e.buffer,r),r+=8,t.samples.forEach(t=>{t.buffer.forEach(t=>{i.set(t,r),r+=t.byteLength})}),i}}a.type=t=>new Uint8Array([t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2),t.charCodeAt(3)]),a.sequence=1,e.default=a},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(/*! xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),r=u(s(/*! xgplayer-utils/src/models/MediaSegmentList */"../xgplayer-utils/src/models/MediaSegmentList.js")),n=u(s(/*! xgplayer-utils/src/models/MediaSegment */"../xgplayer-utils/src/models/MediaSegment.js")),a=u(s(/*! xgplayer-utils/src/models/MediaSample */"../xgplayer-utils/src/models/MediaSample.js")),o=u(s(/*! xgplayer-utils/src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js")),l=u(s(/*! xgplayer-utils/src/write/Buffer */"../xgplayer-utils/src/write/Buffer.js")),d=u(s(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"));function u(t){return t&&t.__esModule?t:{default:t}}class c{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.default("video"),this._audioSegmentList=new r.default("audio");const{browser:t}=o.default;this._fillSilenceFrame="ie"===t}init(){this.on(i.DEMUX_EVENTS.DEMUX_COMPLETE,this.remux.bind(this)),this.on(i.DEMUX_EVENTS.METADATA_PARSED,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:t,videoTrack:e}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(t,e),this._remuxVideo(e),this._remuxAudio(t)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(t){let e,s,r=new l.default,n=d.default.ftyp();if("audio"===t){const{audioTrack:t}=this._context.getInstance("TRACKS");s=t}else{const{videoTrack:t}=this._context.getInstance("TRACKS");s=t}e=d.default.moov({type:t,meta:s.meta}),r.write(n,e);let a=this._context.getInstance("PRE_SOURCE_BUFFER"),o=a.getSource(t);o||(o=a.createSource(t)),o.mimetype=s.meta.codec,o.init=r,this.emit(i.REMUX_EVENTS.INIT_SEGMENT,t)}calcDtsBase(t,e){let s=1/0,i=1/0;t.samples&&t.samples.length&&(s=t.samples[0].dts),e.samples&&e.samples.length&&(i=e.samples[0].dts),this._dtsBase=Math.min(s,i),this._isDtsBaseInited=!0}_remuxVideo(t){const e=t;if(!t.samples||!t.samples.length)return;let s,{samples:r}=e,o=-1,u=-1,c=-1,h=-1;const f=[],p={samples:[]},g=new n.default;for(;r.length;){const t=r.shift(),{isKeyframe:e}=t;let i=t.dts-this._dtsBase;const n=t.cts;if(void 0===s)if(this._videoNextDts)s=i-this._videoNextDts>=1e3?0:i-this._videoNextDts;else if(this._videoSegmentList.isEmpty())s=0;else{const t=this._videoSegmentList.getLastSegmentBefore(i);if(t){let e;const{lastDts:r,gap:n}=t;s=i-(r+(e=i-(r+n)>3?i-(r+n):0))}else s=0}const l=i,d=(i-=s)+n;-1===o&&(o=i,c=d);let u={buffer:[],size:0};p.samples.push(u),u.buffer.push(t.data),u.size+=t.data.byteLength;let h=0;if(r.length>=1){h=r[0].dts-this._dtsBase-s-i}else h=f.length>=1?f[f.length-1].duration:this.videoMeta.refSampleDuration;if(e){const e=new a.default({dts:i,pts:d,duration:h,originDts:t.dts,isRAP:!0});g.addRAP(e)}f.push({dts:i,cts:n,pts:d,data:t.data,size:t.data.byteLength,isKeyframe:e,duration:h,flags:{isLeading:0,dependsOn:e?2:1,isDependedOn:e?1:0,hasRedundancy:0,isNonSync:e?0:1},originDts:l})}const y=f[0],_=f[f.length-1];u=_.dts+_.duration,h=_.pts+_.duration,this._videoNextDts=u,g.startDts=o,g.endDts=u,g.startPts=c,g.endPts=h,g.originStartDts=y.originDts,g.originEndDts=_.originDts+_.duration,g.gap=s;const m=new a.default({dts:y.dts,pts:y.pts,duration:y.duration,isKeyframe:y.isKeyframe,originDts:y.originDts}),E=new a.default({dts:_.dts,pts:_.pts,duration:_.duration,isKeyframe:_.isKeyframe,originDts:_.originDts});g.firstSample=m,g.lastSample=E;let b=new l.default;const v=d.default.moof({id:e.meta.id,time:o,samples:f}),w=d.default.mdat(p);b.write(v,w),e.samples=[],e.length=0;let x=this._context.getInstance("PRE_SOURCE_BUFFER"),U=x.getSource("video");U||(U=x.createSource("video")),U.data.push(b),this.emit(i.REMUX_EVENTS.MEDIA_SEGMENT,"video")}_remuxAudio(t){const{samples:e}=t;let s,r,o=-1,u=-1,c=[];const h={samples:[]};if(!e||!e.length)return;let f=!1;for(;e.length;){let t=e.shift();const{data:i}=t;let n=t.dts-this._dtsBase,a=!1;if(void 0===s)if(this._audioNextDts)s=n-this._audioNextDts>=1e3?0:n-this._audioNextDts;else if(this._audioSegmentList.isEmpty())s=0;else{const t=this._audioSegmentList.getLastSegmentBefore(n);if(t){let e;const{lastDts:i,gap:r}=t;s=n-(i+(e=n-(i+r)>3?n-(i+r):0))}else a=this._fillSilenceFrame&&!this._videoSegmentList.isEmpty(),s=0}const l=n;if(n-=s,a){const t=this._videoSegmentList.getLastSampleBefore(l);t&&t.startDts<n?(r=n-t.startDts,n=t.startDts):a=!1}if(f||(o=n,f=!0),a){e.unshift(t);const s=this.initSilentAudio(n,r);c.push(s);let i={buffer:[],size:0};i.buffer.push({data:s.unit}),i.size+=s.unit.byteLength,h.samples.push(i);continue}let d=0;if(e.length>=1){d=e[0].dts-this._dtsBase-s-n}else d=c.length>=1?c[c.length-1].duration:this.audioMeta.refSampleDuration;const u={dts:n,pts:n,cts:0,size:i.byteLength,duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:l};let p={buffer:[],size:0};p.buffer.push(i),p.size+=i.byteLength,h.samples.push(p),c.push(u)}const p=c[c.length-1];u=p.dts+p.duration,this._audioNextDts=u;const g=new n.default;g.startDts=o,g.endDts=u,g.startPts=o,g.endPts=u,g.originStartDts=c[0].originDts,g.originEndDts=p.originDts+p.duration,g.gap=s,g.firstSample=new a.default({dts:c[0].dts,pts:c[0].pts,duration:c[0].duration,originDts:c[0].originDts}),g.lastSample=new a.default({dts:p.dts,pts:p.pts,duration:p.duration,originDts:p.originDts}),t.samples=c;const y=new l.default,_=d.default.moof({id:t.meta.id,time:o,samples:c}),m=d.default.mdat(h);y.write(_,m),t.samples=[],t.length=0;let E=this._context.getInstance("PRE_SOURCE_BUFFER"),b=E.getSource("audio");b||(b=E.createSource("audio")),b.data.push(y),this.emit(i.REMUX_EVENTS.MEDIA_SEGMENT,"audio",y)}initSilentAudio(t,e){const s=c.getSilentFrame(this._audioMeta.channelCount);return{dts:t,pts:t,cts:0,duration:e,unit:s,size:s.byteLength,originDts:t}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(t){return 1===t?new Uint8Array([0,200,0,128,35,128]):2===t?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}e.default=c},"../xgplayer-utils/dist/write/Buffer.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/dist/write/Buffer.js ***!
  \**********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(i=r)&&i.__esModule?i:{default:i};e.default=class{constructor(t){this.buffer=t||new Uint8Array(0)}write(...t){t.forEach(t=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,t)})}static writeUint32(t){return new Uint8Array([t>>24,t>>16&255,t>>8&255,255&t])}static readAsInt(t){let e="";return t.forEach(t=>{e+=function(t){return t.toString(16).padStart(2,"0")}(t)}),parseInt(e,16)}}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=0,s=arguments.length,i=Array(s>1?s-1:0),r=1;r<s;r++)i[r-1]=arguments[r];var n=!0,a=!1,o=void 0;try{for(var l,d=i[Symbol.iterator]();!(n=(l=d.next()).done);n=!0){var u=l.value;e+=u.length}}catch(t){a=!0,o=t}finally{try{!n&&d.return&&d.return()}finally{if(a)throw o}}var c=new t(e),h=0,f=!0,p=!1,g=void 0;try{for(var y,_=i[Symbol.iterator]();!(f=(y=_.next()).done);f=!0){var m=y.value;c.set(m,h),h+=m.length}}catch(t){p=!0,g=t}finally{try{!f&&_.return&&_.return()}finally{if(p)throw g}}return c}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(t,e,s){"use strict";var i,r=s(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),n=(i=r)&&i.__esModule?i:{default:i};t.exports=n.default},"../xgplayer-utils/src/Context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/Context.js ***!
  \****************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! ./models/MediaInfo */"../xgplayer-utils/src/models/MediaInfo.js"),n=(i=r)&&i.__esModule?i:{default:i};const a=s(/*! events */"../../node_modules/events/events.js");e.default=class{constructor(t=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new n.default,this.allowedEvents=t}getInstance(t){if(this._instanceMap[t])return this._instanceMap[t];throw new Error(`${t}实例尚未初始化`)}initInstance(t,...e){if(this._clsMap[t]){const s=new this._clsMap[t](...e);return this._instanceMap[t]=s,s.init&&s.init(),s}throw new Error(`${t}未在context中注册`)}init(t){if(!this._inited){for(let e in this._clsMap)this._clsMap.hasOwnProperty(e)&&!this._instanceMap[e]&&this.initInstance(e,t);this._inited=!0}}registry(t,e){const s=this._emitter,i=this._isMessageNameValid.bind(this),r=this;return this._clsMap[t]=class extends e{constructor(...e){super(...e),this.listeners={},this.TAG=t,this._context=r}on(t,e){return i(t),this.listeners[t]?this.listeners[t].push(e):this.listeners[t]=[e],s.on(t,e)}once(t,e){return i(t),s.once(t,e)}emit(t,...e){return i(t),s.emit(t,...e)}off(t,e){return i(t),s.off(t,e)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let e in this.listeners)if(t(e)){const t=this.listeners[e]||[];for(let i=0;i<t.length;i++){const r=t[i];s.off(e,r)}}}destroy(){this.removeListeners(),delete r._instanceMap[t],super.destroy()}},(...e)=>this.initInstance(t,...e)}destroyInstances(){Object.keys(this._instanceMap).forEach(t=>{this._instanceMap[t].destroy&&this._instanceMap[t].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(t){if(!this.allowedEvents.indexOf(t)<0)throw new Error(`unregistered message name: ${t}`)}}},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=e.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r=e.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=e.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},i,r,n),o=e.flvAllowedEvents=[];for(let t in a)a.hasOwnProperty(t)&&o.push(a[t]);e.default=a},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=function(){const t=new ArrayBuffer(2);return new DataView(t).setInt16(0,256,!0),256===new Int16Array(t)[0]}(),r={get device(){let t=r.os;return t.isPc?"pc":t.isTablet?"tablet":"mobile"},get browser(){let t=navigator.userAgent.toLowerCase(),e={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(e).filter(s=>e[s].test(t)))[0]},get os(){let t=navigator.userAgent,e=/(?:Windows Phone)/.test(t),s=/(?:SymbianOS)/.test(t)||e,i=/(?:Android)/.test(t),r=/(?:Firefox)/.test(t),n=/(?:iPad|PlayBook)/.test(t)||i&&!/(?:Mobile)/.test(t)||r&&/(?:Tablet)/.test(t),a=/(?:iPhone)/.test(t)&&!n;return{isTablet:n,isPhone:a,isAndroid:i,isPc:!a&&!i&&!s,isSymbian:s,isWindowsPhone:e,isFireFox:r}},get isLe(){return i}};e.default=r},"../xgplayer-utils/src/h264/golomb.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/h264/golomb.js ***!
  \********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this.TAG="Golomb",this._buffer=t,this._bufferIndex=0,this._totalBytes=t.byteLength,this._totalBits=8*t.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let t=this._totalBytes-this._bufferIndex,e=Math.min(4,t),s=new Uint8Array(4);s.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+e)),this._currentWord=new DataView(s.buffer).getUint32(0,!1),this._bufferIndex+=e,this._currentWordBitsLeft=8*e}readBits(t){if(t<=this._currentWordBitsLeft){let e=this._currentWord>>>32-t;return this._currentWord<<=t,this._currentWordBitsLeft-=t,e}let e=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let s=t-this._currentWordBitsLeft;this._fillCurrentWord();let i=Math.min(s,this._currentWordBitsLeft),r=this._currentWord>>>32-i;return this._currentWord<<=i,this._currentWordBitsLeft-=i,e=e<<i|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let t;for(t=0;t<this._currentWordBitsLeft;t++)if(0!=(this._currentWord&2147483648>>>t))return this._currentWord<<=t,this._currentWordBitsLeft-=t,t;return this._fillCurrentWord(),t+this._skipLeadingZero()}readUEG(){let t=this._skipLeadingZero();return this.readBits(t+1)-1}readSEG(){let t=this.readUEG();return 1&t?t+1>>>1:-1*(t>>>1)}}},"../xgplayer-utils/src/h264/nalunit.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/h264/nalunit.js ***!
  \*********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! ./spsParser */"../xgplayer-utils/src/h264/spsParser.js"),n=(i=r)&&i.__esModule?i:{default:i};class a{static getNalunits(t){if(t.length-t.position<4)return[];let e=t.dataview,s=t.position;return 1===e.getInt32(s)||0===e.getInt16(s)&&1===e.getInt8(s+2)?a.getAnnexbNals(t):a.getAvccNals(t)}static getAnnexbNals(t){let e=[],s=a.getHeaderPositionAnnexB(t),i=s.pos,r=i;for(;i<t.length-4;){let n=t.buffer.slice(i,i+s.headerLength);s.pos===t.position&&t.skip(s.headerLength),r=(s=a.getHeaderPositionAnnexB(t)).pos;let o={header:n,body:new Uint8Array(t.buffer.slice(i+n.byteLength,r))};a.analyseNal(o),e.push(o),t.skip(r-t.position),i=r}return e}static getAvccNals(t){let e=[];for(;t.position<t.length-4;){let s=t.dataview.getInt32();if(!(t.length-t.position>=s))break;{let i=t.buffer.slice(t.position,t.position+4);t.skip(4);let r=t.buffer.slice(t.position,t.position+s);t.skip(s);let n={header:i,body:r};a.analyseNal(n),e.push(n)}}return e}static analyseNal(t){switch(31&t.body[0]){case 1:t.ndr=!0;break;case 5:t.idr=!0;break;case 6:break;case 7:t.sps=n.default.parseSPS(t.body);break;case 8:t.pps=!0}}static getHeaderPositionAnnexB(t){let e=t.position,s=0;for(;3!==s&&4!==s&&e<t.length-4;)0===t.dataview.getInt16(e)?1===t.dataview.getInt16(e+2)?s=4:1===t.dataview.getInt8(e+2)?s=3:e++:e++;return e===t.length-4&&(0===t.dataview.getInt16(e)?1===t.dataview.getInt16(e+2)&&(s=4):(e++,0===t.dataview.getInt16(e)&&1===t.dataview.getInt8(e)?s=3:e=t.length)),{pos:e,headerLength:s}}static getAvcc(t,e){let s=new Uint8Array(t.byteLength+e.byteLength+11);s[0]=1,s[1]=t[1],s[2]=t[2],s[3]=t[3],s[4]=255,s[5]=225;let i=6;return s.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),i),i+=2,s.set(t,i),s[i+=t.byteLength]=1,i++,s.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),i),i+=2,s.set(e,i),s}}e.default=a},"../xgplayer-utils/src/h264/spsParser.js":
/*!***********************************************!*\
  !*** ../xgplayer-utils/src/h264/spsParser.js ***!
  \***********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! ./golomb */"../xgplayer-utils/src/h264/golomb.js"),n=(i=r)&&i.__esModule?i:{default:i};class a{static _ebsp2rbsp(t){let e=t,s=e.byteLength,i=new Uint8Array(s),r=0;for(let t=0;t<s;t++)t>=2&&3===e[t]&&0===e[t-1]&&0===e[t-2]||(i[r]=e[t],r++);return new Uint8Array(i.buffer,0,r)}static parseSPS(t){let e=a._ebsp2rbsp(t),s=new n.default(e);s.readByte();let i=s.readByte();s.readByte();let r=s.readByte();s.readUEG();let o=a.getProfileString(i),l=a.getLevelString(r),d=1,u=420,c=[0,420,422,444],h=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(3===(d=s.readUEG())&&s.readBits(1),d<=3&&(u=c[d]),h=s.readUEG()+8,s.readUEG(),s.readBits(1),s.readBool())){let t=3!==d?8:12;for(let e=0;e<t;e++)s.readBool()&&(e<6?a._skipScalingList(s,16):a._skipScalingList(s,64))}s.readUEG();let f=s.readUEG();if(0===f)s.readUEG();else if(1===f){s.readBits(1),s.readSEG(),s.readSEG();let t=s.readUEG();for(let e=0;e<t;e++)s.readSEG()}s.readUEG(),s.readBits(1);let p=s.readUEG(),g=s.readUEG(),y=s.readBits(1);0===y&&s.readBits(1),s.readBits(1);let _=0,m=0,E=0,b=0;s.readBool()&&(_=s.readUEG(),m=s.readUEG(),E=s.readUEG(),b=s.readUEG());let v=1,w=1,x=0,U=!0,A=0,S=0;if(s.readBool()){if(s.readBool()){let t=s.readByte(),e=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],i=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];t>0&&t<16?(v=e[t-1],w=i[t-1]):255===t&&(v=s.readByte()<<8|s.readByte(),w=s.readByte()<<8|s.readByte())}if(s.readBool()&&s.readBool(),s.readBool()&&(s.readBits(4),s.readBool()&&s.readBits(24)),s.readBool()&&(s.readUEG(),s.readUEG()),s.readBool()){let t=s.readBits(32),e=s.readBits(32);U=s.readBool(),x=(A=e)/(S=2*t)}}let L=1;1===v&&1===w||(L=v/w);let M=0,T=0;if(0===d)M=1,T=2-y;else{M=3===d?1:2,T=(1===d?2:1)*(2-y)}let R=16*(p+1),D=16*(g+1)*(2-y);R-=(_+m)*M,D-=(E+b)*T;let O=Math.ceil(R*L);return s.destroy(),s=null,{profile_string:o,level_string:l,bit_depth:h,chroma_format:u,chroma_format_string:a.getChromaFormatString(u),frame_rate:{fixed:U,fps:x,fps_den:S,fps_num:A},par_ratio:{width:v,height:w},codec_size:{width:R,height:D},present_size:{width:O,height:D}}}static _skipScalingList(t,e){let s=8,i=8,r=0;for(let n=0;n<e;n++)0!==i&&(i=(s+(r=t.readSEG())+256)%256),s=0===i?s:i}static getProfileString(t){switch(t){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(t){return(t/10).toFixed(1)}static getChromaFormatString(t){switch(t){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(t){let e={};t&&t.codec_size&&(e.codecWidth=t.codec_size.width,e.codecHeight=t.codec_size.height,e.presentWidth=t.present_size.width,e.presentHeight=t.present_size.height),e.profile=t.profile_string,e.level=t.level_string,e.bitDepth=t.bit_depth,e.chromaFormat=t.chroma_format,e.parRatio={width:t.par_ratio.width,height:t.par_ratio.height},t.frame_rate.fixed&&t.frame_rate.fps_num>0&&t.frame_rate.fps_den>0&&(e.frameRate=t.frame_rate);let s=e.frameRate.fps_den,i=e.frameRate.fps_num;e.refSampleDuration=Math.floor(e.timescale*(s/i))}}e.default=a},"../xgplayer-utils/src/models/MediaInfo.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaInfo.js ***!
  \*************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=t=>{for(let e in t)if(t.hasOwnProperty(e)&&null===t[e])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(t){return i(t)}static isVideoReady(t){return!t.hasVideo||i(t.video)}static isAudioReady(t){return!t.hasAudio||i(t.video)}}e.default=r},"../xgplayer-utils/src/models/MediaSample.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSample.js ***!
  \***************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){let e=i.getDefaultInf();if(!t||"[object Object]"!==Object.prototype.toString.call(t))return e;let s=Object.assign({},e,t);Object.entries(s).forEach(([t,e])=>{this[t]=e})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}e.default=i},"../xgplayer-utils/src/models/MediaSegment.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegment.js ***!
  \****************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(t){t.isRAP=!0,this.randomAccessPoints.push(t)}}},"../xgplayer-utils/src/models/MediaSegmentList.js":
/*!********************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegmentList.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this._type=t,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(t){let e=this._list;if(0===e.length)return-2;let s=e.length-1,i=0,r=0,n=s,a=0;if(t<e[0].originDts)return a=-1;for(;r<=n;){if((i=r+Math.floor((n-r)/2))===s||t>e[i].lastSample.originDts&&t<e[i+1].originDts){a=i;break}e[i].originDts<t?r=i+1:n=i-1}return a}_searchNearestSegmentAfter(t){return this._searchNearestSegmentBefore(t)+1}append(t){let e=this._list,s=this._lastAppendLocation,i=0;-1!==s&&s<e.length&&t.originStartDts>=e[s].lastSample.originDts&&(s===e.length-1||s<e.length-1&&t.originStartDts<e[s+1].originStartDts)?i=s+1:e.length>0&&(i=this._searchNearestSegmentBefore(t.originStartDts)+1),this._lastAppendLocation=i,this._list.splice(i,0,t)}getLastSegmentBefore(t){let e=this._searchNearestSegmentBefore(t);return e>=0?this._list[e]:null}getLastSampleBefore(t){let e=this.getLastSegmentBefore(t);return null!==e?e.lastSample:null}getLastRAPBefore(t){let e=this._searchNearestSegmentBefore(t),s=this._list[e].randomAccessPoints;for(;0===s.length&&e>0;)e--,s=this._list[e].randomAccessPoints;return s.length>0?s[s.length-1]:null}}},"../xgplayer-utils/src/models/trackMeta.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/trackMeta.js ***!
  \*************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.AudioTrackMeta=class{constructor(t){const e={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return t?Object.assign({},e,t):e}};e.VideoTrackMeta=class{constructor(t){const e={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return t?Object.assign({},e,t):e}}},"../xgplayer-utils/src/models/trackSample.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/models/trackSample.js ***!
  \***************************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){let e=i.getDefault();return t?Object.assign({},e,t):e}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}e.AudioTrackSample=i;class r{constructor(t){let e=r.getDefault();return t?Object.assign({},e,t):e}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}e.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this.configs=Object.assign({},t),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={}}init(){let t=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",e=>{t.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src}addSourceBuffers(){let t=this._context.getInstance("PRE_SOURCE_BUFFER");if(t.sources.audio&&t.sources.video){if(Object.keys(this.sourceBuffers).length>=2)return;for(let e=0,s=Object.keys(t.sources).length;e<s;e++){let s=t.sources[Object.keys(t.sources)[e]],i="video"===Object.keys(t.sources)[e]?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,r=this.mediaSource.addSourceBuffer(i);this.sourceBuffers[Object.keys(t.sources)[e]]=r,r.addEventListener("updateend",()=>{this.doAppend()}),this.doAppend()}}}doAppend(){let t=this._context.getInstance("PRE_SOURCE_BUFFER");if(t)for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let s=Object.keys(this.sourceBuffers)[e],i=this.sourceBuffers[s];if(!i.updating){let e=t.sources[s];if(e&&!e.inited)i.appendBuffer(e.init.buffer.buffer),e.inited=!0;else if(e){let t=e.data.shift();t&&i.appendBuffer(t.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/Buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/Buffer.js ***!
  \*********************************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=s(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(i=r)&&i.__esModule?i:{default:i};e.default=class{constructor(t){this.buffer=t||new Uint8Array(0)}write(...t){t.forEach(t=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,t)})}static writeUint32(t){return new Uint8Array([t>>24,t>>16&255,t>>8&255,255&t])}static readAsInt(t){let e="";return t.forEach(t=>{e+=function(t){return t.toString(16).padStart(2,"0")}(t)}),parseInt(e,16)}}},"./src/demuxer/m3u8parser.js":
/*!***********************************!*\
  !*** ./src/demuxer/m3u8parser.js ***!
  \***********************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static parse(t,e=""){console.log(t);let s={duration:0},i=t.split(/\r|\n/),r=(i=i.filter(t=>t)).shift();if(!r.match("#EXTM3U"))return null;for(console.log(i),r=i.shift();r;){let t=r.match(/#(.*):(.*)/);if(t&&t.length>2)switch(t[1]){case"EXT-X-VERSION":s.version=parseInt(t[2]);break;case"EXT-X-MEDIA-SEQUENCE":s.sequence=parseInt(t[2]);break;case"EXT-X-TARGETDURATION":s.targetduration=parseFloat(t[2]);break;case"EXTINF":s.frags||(s.frags=[]);let r={start:s.duration,duration:1e3*parseFloat(t[2])};s.duration+=r.duration,r.url=e+i.shift(),s.frags.push(r)}r=i.shift()}return console.log(s),s}static parseURL(t){let e="",s=t.match(/(.*\/).*\.m3u8$/);if(s&&s.length>0)for(let t=0;t<s.length;t++)s[t].match(/.*\/$/g)&&s[t].length>e.length&&(e=s[t]);return e}}},"./src/demuxer/ts.js":
/*!***************************!*\
  !*** ./src/demuxer/ts.js ***!
  \***************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=d(s(/*! ../stream */"./src/stream.js")),r=d(s(/*! ../../../xgplayer-utils/src/h264/nalunit */"../xgplayer-utils/src/h264/nalunit.js")),n=s(/*! ../../../xgplayer-buffer/src/index */"../xgplayer-buffer/src/index.js"),a=s(/*! ../../../xgplayer-utils/src/models/trackSample */"../xgplayer-utils/src/models/trackSample.js"),o=s(/*! ../../../xgplayer-utils/src/models/trackMeta */"../xgplayer-utils/src/models/trackMeta.js"),l=s(/*! ../../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js");function d(t){return t&&t.__esModule?t:{default:t}}const u={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class c{constructor(t){this.configs=Object.assign({},t),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.inputbuffer=this._context.getInstance(this.configs.inputbuffer),this._tracks=this._context.getInstance("TRACKS")}demux(){if(this.demuxing)return;let t=this.inputbuffer,e={pat:[],pmt:[]},s={};for(;t.length>=188;){let r=t.shift(188),n=new i.default(r.buffer),a={};c.read(n,a,e),a.pes?(s[a.header.pid]||(s[a.header.pid]=[]),s[a.header.pid].push(a.pes),a.pes.ES.buffer=[a.pes.ES.buffer]):s[a.header.pid]&&s[a.header.pid][s[a.header.pid].length-1].ES.buffer.push(a.payload.stream)}for(let t=0;t<Object.keys(s).length;t++){let e=s[Object.keys(s)[t]];for(let i=0;i<e.length;i++)e[i].id=Object.keys(s)[t],e[i].ES.buffer=c.Merge(e[i].ES.buffer),"audio"===e[i].type?this.pushAudioSample(e[i]):"video"===e[i].type&&this.pushVideoSample(e[i])}}pushAudioSample(t){let e;this._tracks.audioTrack?e=this._tracks.audioTrack:(this._tracks.audioTrack=new n.AudioTrack,(e=this._tracks.audioTrack).meta=new o.AudioTrackMeta({audioSampleRate:t.ES.frequence,channelCount:t.ES.channel,codec:"mp4a.40."+t.ES.audioObjectType,config:t.ES.audioConfig,id:2,sampleRateIndex:t.ES.frequencyIndex}),e.meta.refSampleDuration=Math.floor(1024/e.meta.audioSampleRate*e.meta.timescale),this._hasAudioMeta||(this._hasAudioMeta=!0,this.emit(l.DEMUX_EVENTS.METADATA_PARSED,"audio")));let s=t.ES.buffer.buffer.slice(t.ES.buffer.position,t.ES.buffer.length),i=parseInt(t.pts/90),r=parseInt(t.pts/90),d=new a.AudioTrackSample({dts:i,pts:r,data:s});e.samples.push(d),this._hasVideoMeta&&this._hasAudioMeta&&this.emit(l.DEMUX_EVENTS.DEMUX_COMPLETE,"audio")}pushVideoSample(t){let e,s=r.default.getNalunits(t.ES.buffer);this._tracks.videoTrack?e=this._tracks.videoTrack:(this._tracks.videoTrack=new n.VideoTrack,(e=this._tracks.videoTrack).meta=new o.VideoTrackMeta);let i=0,d=!1,u=!1;for(let t=0;t<s.length;t++){let r=s[t];if(r.sps){d=r,e.sps=r.body,e.meta.chromaFormat=d.sps.chroma_format,e.meta.codec="avc1.";for(var c=1;c<4;c++){var h=d.body[c].toString(16);h.length<2&&(h="0"+h),e.meta.codec+=h}e.meta.codecHeight=d.sps.codec_size.height,e.meta.codecWidth=d.sps.codec_size.width,e.meta.frameRate=d.sps.frame_rate,e.meta.id=1,e.meta.level=d.sps.level_string,e.meta.presentHeight=d.sps.present_size.height,e.meta.presentWidth=d.sps.present_size.width,e.meta.profile=d.sps.profile_string,e.meta.refSampleDuration=Math.floor(e.meta.timescale*(d.sps.frame_rate.fps_den/d.sps.frame_rate.fps_num)),e.meta.sarRatio=d.sps.sar_ratio?d.sps.sar_ratio:d.sps.par_ratio}else r.pps?(e.pps=r.body,u=r):i+=4+r.body.byteLength}d&&u&&(e.meta.avcc=r.default.getAvcc(d.body,u.body),this._hasVideoMeta||(this._hasVideoMeta=!0,this.emit(l.DEMUX_EVENTS.METADATA_PARSED,"video")));let f=new Uint8Array(i),p=0,g=!1;for(let t=0;t<s.length;t++){let e=s[t],i=e.body.byteLength;e.idr&&(g=!0),e.pps||e.sps||(f.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),p),p+=4,f.set(e.body,p),p+=i)}let y=new a.VideoTrackSample({dts:parseInt(t.dts/90),pts:parseInt(t.pts/90),cts:(t.pts-t.dts)/90,originDts:t.dts,isKeyframe:g,data:f});e.samples.push(y),this._hasVideoMeta&&this._hasAudioMeta&&this.emit(l.DEMUX_EVENTS.DEMUX_COMPLETE,"video")}static Merge(t){let e,s=0,r=0;for(let e=0;e<t.length;e++)s+=t[e].length-t[e].position;e=new Uint8Array(s);for(let s=0;s<t.length;s++){let i=t[s];e.set(new Uint8Array(i.buffer,i.position),r),r+=i.length-i.position}return new i.default(e.buffer)}static read(t,e,s){c.readHeader(t,e),c.readPayload(t,e,s),"MEDIA"===e.header.packet&&1===e.header.payload&&(e.pes=c.PES(e))}static readPayload(t,e,s){let i=e.header.pid;switch(i){case 0:c.PAT(t,e,s);break;case 1:c.CAT(t,e,s);break;case 2:c.TSDT(t,e,s);break;case 8191:break;default:if(s.pat.some(t=>t.pid===i))c.PMT(t,e,s);else{let r=s.pmt?s.pmt.filter(t=>t.pid===i):[];r.length>0&&c.Media(t,e,u[r[0].streamType][0])}}}static readHeader(t,e){let s={};s.sync=t.readUint8();let i=t.readUint16();s.error=i>>>15,s.payload=i>>>14&1,s.priority=i>>>13&1,s.pid=8191&i,i=t.readUint8(),s.scrambling=i>>6&3,s.adaptation=i>>4&3,s.continuity=15&i,s.packet=0===s.pid?"PAT":"MEDIA",e.header=s}static PAT(t,e,s){let i={},r=t.readUint8();t.skip(r),r=t.readUint8(),i.tabelID=r,r=t.readUint16(),i.error=r>>>7,i.zero=r>>>6&1,i.sectionLength=4095&r,i.streamID=t.readUint16(),i.current=1&t.readUint8(),i.sectionNumber=t.readUint8(),i.lastSectionNumber=t.readUint8();let n=(i.sectionLength-9)/4,a=[];for(let e=0;e<n;e++){let e=t.readUint16(),s=8191&t.readUint16();a.push({program:e,pid:s,type:0===e?"network":"mapPID"})}a.length>0&&(s.pat=s.pat.concat(a)),i.list=a,i.program=t.readUint16(),i.pid=8191&t.readUint16(),e.payload=i}static PMT(t,e,s){let i={};e.header.packet="PMT";let r=t.readUint8();t.skip(r),r=t.readUint8(),i.tableID=r,r=t.readUint16(),i.sectionLength=4095&r,i.program=t.readUint16(),i.current=1&t.readUint8(),i.order=t.readUint8(),i.lastOrder=t.readUint8(),i.PCR_PID=8191&t.readUint16(),i.programLength=4095&t.readUint16();let n=(i.sectionLength-13)/5,a=[];for(let e=0;e<n;e++)a.push({streamType:t.readUint8(),pid:8191&t.readUint16(),es:4095&t.readUint16()});i.list=a,this.pmt||(this.pmt=[]),s.pmt=this.pmt.concat(a.map(t=>({pid:t.pid,es:t.es,streamType:t.streamType,program:i.program}))),e.payload=i}static Media(t,e,s){let r=e.header,n={};if(r.type=s,3===r.adaptation&&(n.adaptationLength=t.readUint8(),n.adaptationLength>0)){let e=t.readUint8();n.discontinue=e>>>7,n.access=e>>>6&1,n.priority=e>>>5&1,n.PCR=e>>>4&1,n.OPCR=e>>>3&1,n.splicePoint=e>>>2&1,n.transportPrivate=e>>>1&1,n.adaptationField=1&e;let s=t.position;if(1===n.PCR&&(n.programClockBase=t.readUint32()<<1,e=t.readUint16(),n.programClockBase|=e>>>15,n.programClockExtension=511&e),1===n.OPCR&&(n.originProgramClockBase=t.readUint32()<<1,e=t.readUint16(),n.originProgramClockBase+=e>>>15,n.originProgramClockExtension=511&e),1===n.splicePoint&&(n.spliceCountdown=t.readUint8()),1===n.transportPrivate){let e=t.readUint8(),s=[];for(let i=0;i<e;i++)s.push(t.readUint8())}if(1===n.adaptationField){let e=t.readUint8(),s=t.readUint8(),i=t.position,r=s>>>6&1,a=s>>>5&1;1===s>>>7&&(s=t.readUint16(),n.ltwValid=s>>>15,n.ltwOffset=61439&s),1===r&&(s=t.readUint24(),n.piecewiseRate=4194303&s),1===a&&(s=t.readInt8(),n.spliceType=s>>>4,n.dtsNextAU1=s>>>1&7,n.marker1=1&s,s=t.readUint16(),n.dtsNextAU2=s>>>1,n.marker2=1&s,s=t.readUint16(),n.dtsNextAU3=s),t.skip(e-1-(t.position-i))}let i=n.adaptationLength-1-(t.position-s);t.skip(i)}n.stream=new i.default(t.buffer.slice(t.position)),e.payload=n}static PES(t){let e={},s=t.payload.stream;if(1!==s.readUint24())e.ES={},e.ES.buffer=s;else{let t=s.readUint8();t>=224&&t<=239&&(e.type="video"),t>=192&&t<=223&&(e.type="audio");let i=s.readUint16();if(e.packetLength=i,"video"!==e.type&&"audio"!==e.type)throw new Error("format is not supported");{let t=s.readUint8();if(2!==t>>>6)throw new Error("error when parse pes header");t=s.readUint8(),e.ptsDTSFlag=t>>>6,e.escrFlag=t>>>5&1,e.esRateFlag=t>>>4&1,e.dsmFlag=t>>>3&1,e.additionalFlag=t>>>2&1,e.crcFlag=t>>>1&1,e.extensionFlag=1&t,e.pesHeaderLength=s.readUint8();let i=e.pesHeaderLength;if(2===e.ptsDTSFlag){let r=[];t=s.readUint8(),r.push(t>>>1&7),t=s.readUint16(),r.push(t>>>1),t=s.readUint16(),r.push(t>>>1),e.pts=r[0]<<30|r[1]<<15|r[2],i-=5,"video"===e.type&&(e.dts=e.pts)}if(3===e.ptsDTSFlag){let r=[];t=s.readUint8(),r.push(t>>>1&7),t=s.readUint16(),r.push(t>>>1),t=s.readUint16(),r.push(t>>>1),e.pts=r[0]<<30|r[1]<<15|r[2];let n=[];t=s.readUint8(),n.push(t>>>1&7),t=s.readUint16(),n.push(t>>>1),t=s.readUint16(),n.push(t>>>1),e.dts=n[0]<<30|n[1]<<15|n[2],i-=10}if(1===e.escrFlag){let r=[],n=[];t=s.readUint8(),r.push(t>>>3&7),r.push(3&t),t=s.readUint16(),r.push(t>>>13),r.push(3&t),t=s.readUint16(),r.push(t>>>13),n.push(3&t),t=s.readUint8(),n.push(t>>>1),e.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(n[0]<<7|n[1]),i-=6}if(1===e.esRateFlag&&(t=s.readUint24(),e.esRate=t>>>1&4194303,i-=3),1===e.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===e.additionalFlag&&(t=s.readUint8(),e.additionalCopyInfo=127&t,i-=1),1===e.crcFlag&&(e.pesCRC=s.readUint16(),i-=2),1===e.extensionFlag)throw new Error("not support extension");i>0&&s.skip(i),e.ES=c.ES(s,e.type)}}return e}static ES(t,e){let s,i={};if("video"===e){if(1!==(s=t.readUint32())&&(t.back(4),1!==(s=t.readUint24())))throw new Error("h264 nal header parse failed");t.skip(2),i.buffer=t}else{if("audio"!==e)throw new Error(`ES ${e} is not supported`);{if((s=t.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const e=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];i.id=0==(s>>>3&1)?"MPEG-4":"MPEG-2",i.layer=s>>>1&3,i.absent=1&s,s=t.readUint16(),i.audioObjectType=1+(s>>>14&3),i.profile=i.audioObjectType-1,i.frequencyIndex=s>>>10&15,i.frequence=e[i.frequencyIndex],i.channel=s>>>6&7,i.frameLength=(3&s)<<11|t.readUint16()>>>5,i.audioConfig=c.getAudioConfig(i.audioObjectType,i.channel,i.frequencyIndex),t.skip(1),i.buffer=t}}return i}static TSDT(t,e,s){e.payload={}}static CAT(t,e,s){let i={};i.tableID=t.readUint8();let r=t.readUint16();i.sectionIndicator=r>>>7,i.sectionLength=4095&r,t.skip(2),r=t.readUint8(),i.version=r>>>3,i.currentNextIndicator=1&r,i.sectionNumber=t.readUint8(),i.lastSectionNumber=t.readUint8();let n=(this.sectionLength-9)/4,a=[];for(let t=0;t<n;t++)a.push({});i.crc32=t.readUint32(),e.payload=i}static getAudioConfig(t,e,s){let i,r,n=navigator.userAgent.toLowerCase();return/firefox/i.test(n)?s>=6?(t=5,i=new Array(4),r=s-3):(t=2,i=new Array(2),r=s):-1!==n.indexOf("android")?(t=2,i=new Array(2),r=s):(t=5,i=new Array(4),s>=6?r=s-3:(1===e&&(t=2,i=new Array(2)),r=s)),i[0]=t<<3,i[0]|=(14&s)>>1,i[1]=(1&s)<<7,i[1]|=e<<3,5===t&&(i[1]|=(14&r)>>1,i[2]=(1&r)<<7,i[2]|=8,i[3]=0),i}}e.default=c},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=p(s(/*! ../../xgplayer-utils/src/Context */"../xgplayer-utils/src/Context.js")),r=s(/*! ../../xgplayer-buffer/src/index */"../xgplayer-buffer/src/index.js"),n=s(/*! xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),a=p(s(/*! ../../xgplayer-buffer/src/Track */"../xgplayer-buffer/src/Track.js")),o=p(s(/*! ./playlist */"./src/playlist.js")),l=p(s(/*! ../../xgplayer-loader-fetch/src */"../xgplayer-loader-fetch/src/index.js")),d=p(s(/*! ./demuxer/m3u8parser */"./src/demuxer/m3u8parser.js")),u=p(s(/*! ./demuxer/ts */"./src/demuxer/ts.js")),c=p(s(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js")),h=p(s(/*! ../../xgplayer-buffer/src/presouce */"../xgplayer-buffer/src/presouce.js")),f=p(s(/*! xgplayer-utils/src/mse */"../xgplayer-utils/src/mse/index.js"));function p(t){return t&&t.__esModule?t:{default:t}}window.Context=i.default,e.default=class{constructor(t){this.configs=Object.assign({},t),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.container=this.configs.container}init(){this._context.registry("M3U8_BUFFER",r.XgBuffer),this._context.registry("TS_BUFFER",r.XgBuffer),this._context.registry("PLAYLIST",o.default),this._context.registry("TRACKS",a.default),this._context.registry("PRE_SOURCE_BUFFER",h.default),this._context.initInstance("M3U8_BUFFER"),this._context.initInstance("TS_BUFFER"),this._playlist=this._context.initInstance("PLAYLIST",{autoclear:!0}),this._tracks=this._context.initInstance("TRACKS"),this._context.initInstance("PRE_SOURCE_BUFFER"),this._context.registry("M3U8_LOADER",l.default),this._context.registry("TS_LOADER",l.default),this._context.initInstance("M3U8_LOADER",{buffer:"M3U8_BUFFER",readtype:1}),this._context.initInstance("TS_LOADER",{buffer:"TS_BUFFER",readtype:0}),this._context.registry("TS_DEMUXER",u.default),this._context.initInstance("TS_DEMUXER",{inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",c.default),this._context.initInstance("MP4_REMUXER"),this._context.registry("MSE",f.default),this.mse=this._context.initInstance("MSE",{container:this.container}),this.initEvents()}initEvents(){this.on(n.LOADER_EVENTS.LOADER_COMPLETE,t=>{let e=this._context.getInstance("TS_LOADER"),s=this._context.getInstance("M3U8_LOADER");if("M3U8_BUFFER"===t.TAG){let i=d.default.parse(t.shift(),this.baseurl);this._playlist.pushM3U8(i);let r=this._playlist.getTs();r?e.load(r.url):this.retrytimes>0&&(this.retrytimes--,s.load(this.url))}else if("TS_BUFFER"===t.TAG){this._context.getInstance("TS_DEMUXER").demux();let t=this._playlist.getTs();t?e.load(t.url):s.load(this.url)}}),this.on(n.REMUX_EVENTS.INIT_SEGMENT,t=>{this.mse.addSourceBuffers()}),this.on(n.REMUX_EVENTS.MEDIA_SEGMENT,t=>{this.mse.doAppend()}),this.on(n.REMUX_EVENTS.REMUX_ERROR,t=>{console.log(t)})}load(t){this.baseurl=d.default.parseURL(t),console.log(this._playlist),this.url=t,this._context.getInstance("M3U8_LOADER").load(t)}}},"./src/playlist.js":
/*!*************************!*\
  !*** ./src/playlist.js ***!
  \*************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this._lastget=void 0,this._audoclear=t.autoclear||!1}get list(){return this._list}set baseURL(t){this.baseURL!==t&&(this.clear(),this._baseURL=t)}get baseURL(){return this._baseURL}push(t,e){this._ts[t]={duration:e,downloaded:!1,start:this.duration},this._list[this.duration]=t,this.duration+=e}pushM3U8(t){if(this.version=t.version,this.targetduration=t.targetduration,t.sequence>this.sequence){this.sequence=t.sequence;for(let e=0;e<t.frags.length;e++){let s=t.frags[e];this._ts[s.url]||this.push(s.url,s.duration)}}}getTs(t){let e,s=Object.keys(this._list);if(void 0===t&&(t=this._lastget?this._lastget.time+this._lastget.duration:0),!(s.length<1||t>=this.duration)){for(let i=0;i<s.length&&t>=s[i];i++){let t=this._list[s[i]];e={url:t,downloaded:this._ts[t].downloaded,time:parseInt(s[i]),duration:parseInt(this._ts[t].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=e}return e}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}}},"./src/stream.js":
/*!***********************!*\
  !*** ./src/stream.js ***!
  \***********************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){if(!(t instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=t,this.dataview=new DataView(t),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(t){this.dataview.position=t}get position(){return this.dataview.position}back(t){this.position-=t}skip(t){let e=Math.floor(t/4),s=t%4;for(let t=0;t<e;t++)i.readByte(this.dataview,4);s>0&&i.readByte(this.dataview,s)}static readByte(t,e,s){let i;switch(e){case 1:i=s?t.getInt8(t.position):t.getUint8(t.position);break;case 2:i=s?t.getInt16(t.position):t.getUint16(t.position);break;case 3:if(s)throw"not supported for readByte 3";i=t.getUint8(t.position)<<16,i|=t.getUint8(t.position+1)<<8,i|=t.getUint8(t.position+2);break;case 4:i=s?t.getInt32(t.position):t.getUint32(t.position);break;case 8:if(s)throw"not supported for readBody 8";i=t.getUint32(t.position)<<32,i|=t.getUint32(t.position+4);break;default:i=""}return t.position+=e,i}readUint8(){return i.readByte(this.dataview,1)}readUint16(){return i.readByte(this.dataview,2)}readUint24(){return i.readByte(this.dataview,3)}readUint32(){return i.readByte(this.dataview,4)}readUint64(){return i.readByte(this.dataview,8)}readInt8(){return i.readByte(this.dataview,1,!0)}readInt16(){return i.readByte(this.dataview,2,!0)}readInt32(){return i.readByte(this.dataview,4,!0)}writeUint32(t){return new Uint8Array([t>>>24&255,t>>>16&255,t>>>8&255,255&t])}}e.default=i},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(t,e,s){t.exports=s(/*! ./src/index.js */"./src/index.js")}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,